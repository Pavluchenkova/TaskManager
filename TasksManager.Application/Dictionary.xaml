<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:viewmodel="clr-namespace:TasksManager.Application.ViewModel"
                    xmlns:Extenders="clr-namespace:TasksManager.Application.Utility"
                    xmlns:local="clr-namespace:TasksManager.Application">

    <DataTemplate x:Key="DragTemplate">
        <TextBlock Text="{Binding Path=Title}" Margin="2" TextAlignment="Center" FontWeight="Bold"  FontSize="16"/>
    </DataTemplate>

    <Style x:Key="ListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="{TemplateBinding Padding}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
        <ControlTemplate x:Key="MaterialDesignFloatingHintComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot"
              Background="{TemplateBinding Background}"
              SnapsToDevicePixels="True">
            <Grid x:Name="InnerRoot">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="toggleButton"
                              Grid.ColumnSpan="2"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{StaticResource MaterialDesignComboBoxToggleButton}"/>
                <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                      Margin="{TemplateBinding Padding}"
                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                      UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                    <Grid x:Name="InputRoot"
                          HorizontalAlignment="Left">
                        <ContentPresenter x:Name="contentPresenter"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False"/>
                        <TextBox x:Name="PART_EditableTextBox"
                                 IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                 HorizontalAlignment="Left"
                                 HorizontalContentAlignment="Stretch"
                                 Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                                 CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"                                 
                                 Visibility="Collapsed" />

                        <materialDesign:SmartHint x:Name="Hint"                                      
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                       UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                       UseFloating="{Binding Path=(materialDesign:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                                       HintOpacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                       Hint="{TemplateBinding materialDesign:HintAssist.Hint}" />
                    </Grid>
                </Grid>
                <materialDesign:Underline x:Name="Underline"
                               Grid.ColumnSpan="2"
                               IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                               Visibility="{Binding Path=(materialDesign:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}"/>

                <materialDesign:ComboBoxPopup x:Name="PART_Popup"
                                   AllowsTransparency="true"
                                   Focusable="False"
                                   HorizontalOffset="-11.5"
                                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                   PlacementTarget="{Binding ElementName=templateRoot}"
                                   SnapsToDevicePixels="True"
                                   UseLayoutRounding="True"
                                   Placement="Custom"
                                   PopupAnimation="Fade"
                                   VerticalOffset="0"
                                   DefaultVerticalOffset="5"
                                   DownVerticalOffset="-15.5"
                                   UpVerticalOffset="15"
                                   ClassicMode="{Binding Path=(materialDesign:ComboBoxAssist.ClassicMode), RelativeSource={RelativeSource TemplatedParent}}"
                                   UpContentTemplate="{StaticResource PopupContentUpTemplate}"
                                   DownContentTemplate="{StaticResource PopupContentDownTemplate}"
                                   ClassicContentTemplate="{StaticResource PopupContentClassicTemplate}">
                    <ContentControl>
                        <ScrollViewer MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                      Background="{Binding Background, ElementName=PART_Popup}">
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>
                    </ContentControl>
                </materialDesign:ComboBoxPopup>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                <Setter Property="Background" TargetName="templateRoot" Value="{Binding Background, ElementName=PART_Popup}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="templateRoot" Property="Opacity" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(materialDesign:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="materialDesign:HintAssist.IsFloating" Value="True">
                <Setter TargetName="InnerRoot" Property="Margin" Value="0 11.5 0 0" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="False"/>
                    <Condition Property="IsDropDownOpen" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Underline" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition SourceName="PART_EditableTextBox" Property="IsKeyboardFocused" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                    <Condition Property="IsDropDownOpen" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="Hint" Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
                <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter TargetName="Underline" Property="IsActive" Value="True"/>
            </Trigger>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="Validation.HasError" Value="true" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <!--<Condition Property="IsMouseOver" Value="true" />-->
                    <Condition Property="Validation.HasError" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter TargetName="Underline" Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    

    <Style x:Key="ComboBoxFilterStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MaterialDesignComboBox}">
        
        <Setter Property="Template" Value="{StaticResource MaterialDesignFloatingHintComboBoxTemplate}" />      
      
    </Style>
    
    <Style x:Key="ErrorToolTip" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ShowHideButton" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="Visibility" Value="Hidden"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsMouseOver}" Value="true">
                <Setter Property="Visibility" Value="visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DoneButton" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="Visibility" Value="Hidden"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsMouseOver}" Value="true">
                <Setter Property="Visibility" Value="visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}, Path=DataContext.Status}" Value="Done">
                <Setter Property="Visibility" Value="Hidden"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>    

    <ControlTemplate x:Key="validationFailed">

    </ControlTemplate>

    <Extenders:PriorityConverter x:Key="converter" />
    
    <Style x:Key="AddCategoryButton" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFlatButton}">
        <Setter Property="Visibility" Value="Hidden"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding SelectedTask.IsNew}"  Value="true">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding SelectedTask.IsModify}"  Value="true">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="TaskDataTemplate">
        <Border BorderThickness="0">
            <DockPanel HorizontalAlignment="Stretch">

                <materialDesign:PackIcon Kind="flag" Foreground="{Binding Priority, Converter={StaticResource converter}}" Height="20" Width="20" VerticalAlignment="Center"/>
                <TextBlock HorizontalAlignment="Left" VerticalAlignment="Center" Text="{Binding Title}" FontWeight="Bold" FontSize="16" TextTrimming="CharacterEllipsis" Width="130" Margin="0 0 5 0"></TextBlock>

                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                    <TextBlock HorizontalAlignment="Right" VerticalAlignment="Center" Text="{Binding FinishDate, StringFormat=d}" FontSize="16" Margin="0 0 5 0"></TextBlock>
                    <Button HorizontalAlignment="Right" Style="{StaticResource DoneButton}" ToolTip="Done" Command="{Binding MakeDoneCommand}"
                                CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ListViewItem}}, Path=DataContext}"                                
                                DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}, Mode=TwoWay}">
                        <materialDesign:PackIcon Kind="Check" Height="24" Width="24" />
                    </Button>
                    <Button HorizontalAlignment="Right" Style="{StaticResource ShowHideButton}" ToolTip="Edit" Command="{Binding EditTaskCommand}" 
                                CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ListViewItem}}, Path=DataContext}" 
                                DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" >
                        <materialDesign:PackIcon Kind="Pencil"  Height="24" Width="24" />
                    </Button>
                    <Button HorizontalAlignment="Right" Style="{StaticResource ShowHideButton}" ToolTip="Delete"
                                CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=DataContext}"
                                Command="{Binding DeleteTaskCommand}" DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}">
                        <materialDesign:PackIcon Kind="Delete"  Height="24" Width="24" />
                    </Button>
                </StackPanel>
            </DockPanel>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="CreateTaskDataTemplate">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
            </Grid.RowDefinitions>
            <Button     Grid.Row="0"
                        Style="{StaticResource MaterialDesignFlatButton}"   
                        Margin="0"                        
                        HorizontalAlignment="Right" 
                        ToolTip="Add category"
                        DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}"
                        Command="{Binding AddCategoryCommand}" 
                        Content="+ Category" VerticalAlignment="Top" >
            </Button>
            <TextBox  Grid.Row="1"                          
                      Name="TitleTextBox"
                      Margin="0 0 0 5" 
                      materialDesign:HintAssist.Hint="Title" 
                      Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                      Width="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}"
                      AcceptsReturn="True"
                      TextWrapping="Wrap"
                      DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}"
                      Validation.ErrorTemplate="{StaticResource validationFailed}">
                <TextBox.Text>
                    <Binding Path="NewTask.Title"
                                 UpdateSourceTrigger="PropertyChanged"
                                 NotifyOnValidationError="True">
                        <Binding.ValidationRules>
                            <Extenders:NotEmptyValidationRule ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>

            <ComboBox Grid.Row="2" materialDesign:HintAssist.Hint="Status" Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          ItemsSource="{Binding TaskStatuses}" SelectedItem="{Binding NewTask.Status}"                        
                          DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" Margin="0 5 0 5" />
            <ComboBox Grid.Row="3" materialDesign:HintAssist.Hint="Priority" Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          ItemsSource="{Binding TaskPriorities}" SelectedItem="{Binding NewTask.Priority}" 
                          DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" Margin="0 5 0 5" />
            
            <ComboBox Grid.Row="4" materialDesign:HintAssist.Hint="Category" Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          ItemsSource="{Binding Categories, Mode=TwoWay}" DisplayMemberPath="Name" SelectedItem="{Binding SelectedCategory}" 
                          IsReadOnly="False" IsEditable="True" Text="{Binding Path=NewTask.TaskCategory.CategoryName, UpdateSourceTrigger=PropertyChanged}"
                          DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" Margin="0 5 0 5" 
                         />
            <DatePicker Grid.Row="5" Width="Auto" HorizontalAlignment="Stretch" Margin="0 20 0 5" materialDesign:HintAssist.Hint="Finish Date" Style="{StaticResource MaterialDesignFloatingHintDatePicker}"
                        DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" 
                        SelectedDate="{Binding NewTask.FinishDate}" />
            
            <TextBox  Grid.Row="6" Text="{Binding NewTask.Description, Mode=TwoWay}" materialDesign:HintAssist.Hint="Notes" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                          DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" 
                          Width="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" AcceptsReturn="True" TextWrapping="Wrap" Margin="0 5 0 0"></TextBox>
                                 
            <DockPanel Grid.Row="7" HorizontalAlignment="Right" >
                <Button 
                        Command="{Binding SaveTaskCommand}"
                        DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}"
                        CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ListViewItem}}, Path=DataContext}"
                        DockPanel.Dock="Right"                      
                        ToolTip="Save new"
                        Margin="5"
                        Style="{StaticResource MaterialDesignFloatingActionMiniButton}" 
                        IsEnabled="{Binding ElementName=TitleTextBox, Path=Text.Length}">
                    <materialDesign:PackIcon Kind="Check"/>
                </Button>
                <Button 
                        Command="{Binding CancelCommand}"
                        DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}"
                        CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ListViewItem}}, Path=DataContext}"
                        DockPanel.Dock="Right"                        
                        ToolTip="Cancel" 
                        Margin="5"
                        Style="{StaticResource MaterialDesignFloatingActionMiniButton}">
                    <materialDesign:PackIcon Kind="WindowClose"/>
                </Button>
            </DockPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="EditTaskDataTemplate">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
            </Grid.RowDefinitions>
            <Button     Grid.Row="0"
                        Style="{StaticResource MaterialDesignFlatButton}"   
                        Margin="0"                        
                        HorizontalAlignment="Right" 
                        ToolTip="Add category"
                        DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}"
                        Command="{Binding AddCategoryCommand}" 
                        Content="+ Category" VerticalAlignment="Top" >
            </Button>
            <TextBox  Grid.Row="1" Grid.ColumnSpan ="3"                         
                      Name="TitleTextBox"                      
                      FontSize="16"
                      FontWeight="Bold"
                      TextAlignment="Left"
                      Margin="0 0 0 5" 
                      Style ="{StaticResource ErrorToolTip}"                                            
                      Width="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}"
                      AcceptsReturn="True"
                      TextWrapping="Wrap"
                      DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}"
                      Validation.ErrorTemplate="{StaticResource validationFailed}">
                <TextBox.Text>
                    <Binding Path="SelectedTask.Title"
                                 UpdateSourceTrigger="PropertyChanged"
                                 NotifyOnValidationError="True">
                        <Binding.ValidationRules>
                            <Extenders:NotEmptyValidationRule ValidatesOnTargetUpdated="True"/>
                        </Binding.ValidationRules>
                    </Binding>
                </TextBox.Text>
            </TextBox>
            <ComboBox Grid.Row="2" materialDesign:HintAssist.Hint="Status" Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          ItemsSource="{Binding TaskStatuses}" SelectedItem="{Binding SelectedTask.Status}"                        
                          DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" Margin="0 5 0 5" />
            <ComboBox Grid.Row="3" materialDesign:HintAssist.Hint="Priority" Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          ItemsSource="{Binding TaskPriorities}" SelectedItem="{Binding SelectedTask.Priority}" 
                          DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" Margin="0 5 0 5" />

            <ComboBox Grid.Row="4" materialDesign:HintAssist.Hint="Category" Style="{StaticResource MaterialDesignFloatingHintComboBox}"
                          ItemsSource="{Binding Categories}" DisplayMemberPath="Name" SelectedItem="{Binding SelectedCategory}"                      
                          DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" Margin="0 5 0 5" />
            
            <DatePicker Grid.Row="5" Width="Auto" HorizontalAlignment="Stretch" Margin="0 20 0 5" materialDesign:HintAssist.Hint="Finish Date" Style="{StaticResource MaterialDesignFloatingHintDatePicker}"
                        DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" 
                        SelectedDate="{Binding NewTask.FinishDate}" />

            <TextBox  Grid.Row="6" Text="{Binding SelectedTask.Description, Mode=TwoWay}" materialDesign:HintAssist.Hint="Notes" Style="{StaticResource MaterialDesignFloatingHintTextBox}"
                          DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}"
                          Width="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}" AcceptsReturn="True" TextWrapping="Wrap" Margin="0 5 0 0"></TextBox>

            <DockPanel Grid.Row="7" HorizontalAlignment="Right" >               
                <Button 
                        Margin="5"
                        Style="{StaticResource MaterialDesignFloatingActionMiniButton}" 
                        Command="{Binding SaveTaskCommand}"
                        DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}"
                        CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ListViewItem}}, Path=DataContext}"
                        DockPanel.Dock="Right"                      
                        ToolTip="Save"                        
                        IsEnabled="{Binding ElementName=TitleTextBox, Path=Text.Length}">
                    <materialDesign:PackIcon Kind="Check"/>
                </Button>
                <Button 
                        Margin="5"
                        Style="{StaticResource MaterialDesignFloatingActionMiniButton}"
                        Command="{Binding CancelCommand}"
                        DataContext="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType=ListView}}"
                        CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ListViewItem}}, Path=DataContext}"
                        DockPanel.Dock="Right"                        
                        ToolTip="Cancel">
                    <materialDesign:PackIcon Kind="WindowClose"/>
                </Button>
            </DockPanel>
        </Grid>
    </DataTemplate>

</ResourceDictionary>